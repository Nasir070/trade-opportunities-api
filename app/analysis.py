from google import genai
import os, logging
from typing import List, Dict
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

class AIAnalyzer:
    def __init__(self):
        api_key = os.getenv('GEMINI_API_KEY')
        if api_key:
            self.client = genai.Client(api_key=api_key)
        else:
            self.client = None

    async def analyze_sector(self, sector: str, news: List[Dict], market: Dict) -> str:
        if not self.client:
            return self._mock_report(sector, news)
        context = self._build_context(sector, news, market)
        prompt = self._build_prompt(sector, context)
        try:
            resp = self.client.models.generate_content(model='gemini-2.0-flash', contents=prompt)
            report = resp.text
        except Exception as e:
            logger.error(f"AI error: {e}")
            report = self._mock_report(sector, news)
        if not report.startswith('#'):
            report = f"# Sector Analysis: {sector.title()}\n\n" + report
        if 'Report generated by Trade Opportunities API' not in report:
            report += f"\n\n---\n*Report generated by Trade Opportunities API – {datetime.now().strftime('%B %Y')}*"
        return report

    def _build_context(self, sector: str, news: List[Dict], market: Dict) -> str:
        lines = [f"Sector: {sector.title()}\n"]
        lines.append("Recent News:")
        for n in news[:5]:
            lines.append(f"- {n['title']}: {n['snippet']}")
        for m in market.get('market_indicators', [])[:3]:
            lines.append(f"- {m.get('title', '')}: {m.get('body', '')}")
        return '\n'.join(lines)

    def _build_prompt(self, sector: str, context: str) -> str:
        return (
            f"You are a market analyst specializing in Indian sectors. "
            f"Analyze the {sector} sector and provide a detailed markdown report.\n\n"
            f"Context:\n{context}\n\n"
            "Structure the report with the following sections:\n"
            f"# Sector Analysis: {sector.title()}\n"
            "## Market Overview\n## Current Trends\n## Trade Opportunities (table)\n"
            "## Major News Headlines\n## Risks & Challenges\n## Investment Outlook\n---\n"
            f"*Report generated by Trade Opportunities API – {datetime.now().strftime('%B %Y')}*"
        )

    def _mock_report(self, sector: str, news: List[Dict]) -> str:
        headlines = '\n'.join([f"- {n['title']}" for n in news[:4]]) or '- No recent headlines available'
        return (
            f"# Sector Analysis: {sector.title()}\n\n"
            "## Market Overview\nMock market overview for {sector}.\n\n"
            "## Current Trends\n- Trend 1\n- Trend 2\n- Trend 3\n\n"
            "## Trade Opportunities\n| Opportunity | Description | Outlook |\n|-------------|-------------|---------|\n| Mock Opp 1 | Description 1 | Positive |\n| Mock Opp 2 | Description 2 | Neutral |\n\n"
            f"## Major News Headlines\n{headlines}\n\n"
            "## Risks & Challenges\n- Risk 1\n- Risk 2\n\n"
            "## Investment Outlook\nOverall outlook is positive.\n\n---\n"
            f"*Report generated by Trade Opportunities API – {datetime.now().strftime('%B %Y')}*"
        )
